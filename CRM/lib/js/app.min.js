"use strict";
/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && $("html").addClass("ismobile"), $(document).ready(function() {
    function a(a, b, c) {
        $(a).mCustomScrollbar({
            theme: b,
            scrollInertia: 100,
            axis: "yx",
            mouseWheel: {
                enable: !0,
                axis: c,
                preventDefault: !0
            }
        })
    }
    if ($("html").hasClass("ismobile") || $(".c-overflow")[0] && a(".c-overflow", "minimal-dark", "y"), $(".navigation__sub")[0] && $("body").on("click", ".navigation__sub > a", function(a) {
            a.preventDefault(), $(this).closest(".navigation__sub").toggleClass("navigation__sub--toggled"), $(this).parent().find("ul").stop().slideToggle(250)
        }), $(".top-search")[0] && ($("body").on("focus", ".top-search__input", function() {
            $(".top-search").addClass("top-search--focused")
        }), $("body").on("click", ".top-menu__trigger > a", function(a) {
            a.preventDefault(), $(".top-search").addClass("top-search--focused"), $(".top-search__input").focus()
        }), $("body").on("click", ".top-search__reset", function() {
            $(".top-search").removeClass("top-search--focused "), $(".top-search__input").val("")
        }), $("body").on("blur", ".top-search__input", function() {
            var a = $(this).val();
            !a.length > 0 && $(".top-search").removeClass("top-search--focused")
        })), $("body").on("click", '[data-mae-target="#notifications"]', function(a) {
            a.preventDefault();
            var b = $(this).data("target");
            $("a[href=" + b + "]").tab("show")
        }), $("#widget-weather__main")[0]) {
    }
    if ($(".form-group--float")[0] && ($(".form-group--float").each(function() {
            var a = $(this).find(".form-control").val();
            0 == !a.length && $(this).addClass("form-group--active")
        }), $("body").on("blur", ".form-group--float .form-control", function() {
            var a = $(this).val(),
                b = $(this).parent();
            0 == a.length ? b.removeClass("form-group--active") : b.addClass("form-group--active")
        })), $(".collapse")[0] && ($(".collapse").on("show.bs.collapse", function(a) {
            $(this).closest(".panel").find(".panel-heading").addClass("active")
        }), $(".collapse").on("hide.bs.collapse", function(a) {
            $(this).closest(".panel").find(".panel-heading").removeClass("active")
        }), $(".collapse.in").each(function() {
            $(this).closest(".panel").find(".panel-heading").addClass("active")
        })), $(".login")[0] && $("body").on("click", ".login__block [data-block]", function(a) {
            a.preventDefault();
            var b = $(this).data("block"),
                c = $(this).closest(".login__block"),
                d = $(this).data("bg");
            c.removeClass("toggled"), setTimeout(function() {
                $(".login").attr("data-lbg", d), $(b).addClass("toggled")
            })
        }), $(".action-header__search")[0]) {
        var c;
        $("body").on("click", ".action-header__toggle", function(a) {
            a.preventDefault(), c = $(this).closest(".action-header").find(".action-header__search"), c.fadeIn(300), c.find(".action-header__input").focus()
        }), $("body").on("click", ".action-header__close", function() {
            c.fadeOut(300), setTimeout(function() {
                c.find(".action-header__input").val("")
            }, 350)
        })
    }
    $("input-mask")[0] && $(".input-mask").mask(), $(".color-picker")[0] && $(".color-picker").each(function() {
        var a = $(this).find(".color-picker__value"),
            b = $(this).find(".color-picker__target");
        b.farbtastic(a)
    }), $(".date-time-picker")[0] && $(".date-time-picker").datetimepicker({
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".time-picker")[0] && $(".time-picker").datetimepicker({
        format: "LT",
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".date-picker")[0] && $(".date-picker").datetimepicker({
        format: "DD/MM/YYYY",
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".datetime-picker-inline")[0] && $(".datetime-picker-inline").datetimepicker({
        inline: !0,
        sideBySide: !0,
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".tab-wizard")[0] && $(".tab-wizard").bootstrapWizard({
        tabClass: "tab-wizard__nav",
        nextSelector: ".tab-wizard__next",
        previousSelector: ".tab-wizard__previous",
        firstSelector: ".tab-wizard__first",
        lastSelector: ".tab-wizard__last"
    }), $(".lightbox")[0] && $(".lightbox").lightGallery({
        enableTouch: !0
    }), $('[data-toggle="tooltip"]')[0] && $('[data-toggle="tooltip"]').tooltip(), $('[data-toggle="popover"]')[0] && $('[data-toggle="popover"]').popover(), $("html").hasClass("ie9") && $("input, textarea").placeholder({
        customClass: "ie9-placeholder"
    }), $("select.select2")[0] && $("select.select2").select2({
        dropdownAutoWidth: !0,
        width: "100%"
    }), $(".textarea-autosize")[0] && autosize($(".textarea-autosize"))
}), $(document).ready(function() {
    function a(a) {
        a.requestFullscreen ? a.requestFullscreen() : a.mozRequestFullScreen ? a.mozRequestFullScreen() : a.webkitRequestFullscreen ? a.webkitRequestFullscreen() : a.msRequestFullscreen && a.msRequestFullscreen()
    }
    var b, c = $("body");
    $(this);
    c.on("click", "[data-mae-action]", function(d) {
        d.preventDefault();
        var e = $(this).data("mae-action");
        switch (e) {
            case "block-open":
                b = $(this).data("mae-target"), $(b).addClass("toggled"), c.addClass("block-opened"), c.append('<div data-mae-action="block-close" data-mae-target="' + b + '" class="mae-backdrop mae-backdrop--sidebar" />');
                break;
            case "block-close":
                $(b).removeClass("toggled"), c.removeClass("block-opened"), $(".mae-backdrop--sidebar").remove();
                break;
            case "fullscreen":
                a(document.documentElement);
                break;
            case "print":
                window.print();
                break;
            case "clear-localstorage":
                swal({
                    title: "Are you sure?",
                    text: "This can not be undone!",
                    type: "warning",
                    showCancelButton: !0,
                    confirmButtonColor: "#3085d6",
                    confirmButtonText: "Yes, clear it",
                    cancelButtonText: "No, cancel"
                }).then(function() {
                    localStorage.clear(), swal("Cleared!", "Local storage has been successfully cleared", "success")
                })
        }
    })
    // setTimeout(function() {
    //     hidePageLoader(document.getElementById("page-loader"));
    //     initBootGrid();
    // }, 2000);
});

var pageLoader = document.getElementById("page-loader");

function hidePageLoader() {
    var b = 1;
    var c = setInterval(function() {
      if (b <= 0.1) {
        clearInterval(c);
        pageLoader.style.display = "none";
      }
      pageLoader.style.opacity = b;
      pageLoader.style.filter = "alpha(opacity=" + 100 * b + ")";
      b -= 0.1 * b;
    }, 10);
}
function showPageLoader() {
    var b = 1;
    var c = setInterval(function() {
      if (b >= 0.9) {
        clearInterval(c);
        pageLoader.style.display = "block";
      }
      pageLoader.style.opacity = b;
      pageLoader.style.filter = "alpha(opacity=" + 100 * b + ")";
      b += 0.1 * b;
    }, 10);
}

function initBootGrid(isAddButton, isSelectAllEnabled, options){
    var grid = $("#data-table").bootgrid({
        caseSensitive : false,
        addNew : isAddButton,
        reloadBtn: true,
        addClicked : function(){
            if(options && typeof options.clickHandler == 'function'){
                options.clickHandler();
            }
        },
        //Override default icon classes
        css: {
            icon: 'table-bootgrid__icon zmdi',
            iconSearch: 'zmdi-search',
            iconColumns: 'zmdi-view-column',
            iconDown: 'zmdi-sort-amount-desc',
            iconRefresh: 'zmdi-refresh',
            iconUp: 'zmdi-sort-amount-asc',
            dropDownMenu: 'dropdown form-group--select',
            search: 'table-bootgrid__search',
            actions: 'table-bootgrid__actions',
            header: 'table-bootgrid__header text-center',
            footer: 'table-bootgrid__footer',
            dropDownItem: 'table-bootgrid__label',
            table: 'table table-bootgrid',
            pagination: 'pagination table-bootgrid__pagination',
            link : 'zmdi zmdi-eye',
            isAddButton : isAddButton ? 'add_btn_inc' : '',
            reloadBtn : 'zmdi zmdi-refresh-sync'
        },

        //Override default module markups
        templates: {
            actionDropDown: "<span class=\"{{css.dropDownMenu}}\">" + "<a href='javascript:void(0)' data-toggle=\"dropdown\" class=\"dropdown-text\">{{ctx.content}}</a><ul class=\"{{css.dropDownMenuItems}}\" role=\"menu\"></ul></span>",
            addButton : "<button class=\"btn btn-primary header_add_btn\" type=\"button\" title=\"Add\" data-toggle=\"modal\" href=\"#modal--default\">Add</button>",
            search: "<div class=\"{{css.search}} form-group {{css.isAddButton}}\"><span class=\"{{css.icon}} {{css.iconSearch}}\"></span><input type=\"text\" class=\"{{css.searchField}}\" placeholder=\"{{lbl.search}}\" /><i class='form-group__bar'></i></div>",
            header: "<div id=\"{{ctx.id}}\" class=\"{{css.header}}\"><p class=\"{{css.search}}\"></p><p class=\"{{css.actions}}\"></p></div>",
            actionDropDownCheckboxItem: "<li><div class='tabe-bootgrid__checkbox checkbox checkbox--dark'><label class=\"{{css.dropDownItem}}\"><input name=\"{{ctx.name}}\" type=\"checkbox\" value=\"1\" class=\"{{css.dropDownItemCheckbox}}\" {{ctx.checked}} /> {{ctx.label}}<i class='input-helper'></i></label></div></li>",
            footer: "<div id=\"{{ctx.id}}\" class=\"{{css.footer}}\"><div class=\"row\"><div class=\"col-sm-6\"><p class=\"{{css.pagination}}\"></p></div><div class=\"col-sm-6 table-bootgrid__showing hidden-xs\"><p class=\"{{css.infos}}\"></p></div></div></div>",
            select: "<div class='checkbox'><label><input name=\"select\" type=\"{{ctx.type}}\" class=\"{{css.selectBox}}\" value=\"{{ctx.value}}\" {{ctx.checked}} /><i class='input-helper'></i></label></div>",
            reloadBtn: "<button class=\"btn btn-primary zmdi zmdi-refresh-sync\" type=\"button\" title=\"Reload\"></button>"
        },
        formatters: {
            "link": function(column, row){
                return "<a class=\"btn btn-link\" href=\"https://www.linkedin.com/in/" + row.id + "/\" target=\"_blank\"> View</a>";//class=\"zmdi zmdi-eye\"
            },
            "editButton" : function(col, row){
                var title = escape(row.title);
                var message = escape(row.message);
                return "<button class=\"btn btn-default btn-md edit-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\">Edit</button>";
            },
            "deleteButton" : function(col, row){
                return "<button class=\"btn btn-danger btn-md delete-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\">Delete</button>";
            },
            "sendButton" : function(col, row){
                return "<button class=\"btn btn-info btn-md send-item\" type=\"button\" data-row-id=\"" + row.id + "\">Send</button>";
            },
            "nameAndLink" : function(col, row){
                return "<span class=\"pull-left col-md-9 no-padding\">"+row.name+"</span><a href=\""+row.url+"\" class=\"pull-right show_on_hover col-md-3\" target=\"_blank\">View</a>";
            },
            "folMessage" : function(col, row){
                return "<span data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title=\""+row.follow_up_message+"\">"+row.follow_up_message.slice(0,60)+"</span>";
            },
            "invMessage" : function(col, row){
                return "<span data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title=\""+row.invitation_message+"\">"+row.invitation_message.slice(0,60)+"</span>";
            },
            "date" : function(col, row){
                return "<span >"+(new Date(row.date_conn_sent)).toLocaleString()+"</span>";
            },
            "tag" : function(col, row){
                if(row.tags){
                    return "<button class=\"btn btn-link btn-md edit-item\" data-toggle=\"modal\" href=\"#edit--tag\" type=\"button\" data-row-id=\"" + row.id + "\">" + row.tags + "</button>";
                } else {
                    return "<button class=\"btn btn-link btn-md edit-item\" data-toggle=\"modal\" href=\"#edit--tag\" type=\"button\" data-row-id=\"" + row.id + "\"> Edit </button>";
                }
            }
        },
        reloadClicked : function(){
            if(typeof options.reloadClicked == 'function'){
                disableRefreshIcon();
                options.reloadClicked();
            }
        },
        columnSelection : false,
        selection: isSelectAllEnabled,
        multiSelect: isSelectAllEnabled,
        // rowSelect: isSelectAllEnabled,
        keepSelection: isSelectAllEnabled
    });
    grid.on('loaded.rs.jquery.bootgrid', function(e){
        grid.find(".edit-item").on("click", function(e){
            if(options && typeof options.editRecord == 'function'){
                options.editRecord($(this).data("row-id"));
            }
        });
        grid.find(".delete-item").on("click", function(e){
            if(options && typeof options.deleteRecord == 'function'){
                options.deleteRecord($(this).data("row-id"));
            }
        });
        grid.find(".send-item").on("click", function(e){
            if(options && typeof options.sendMessage == 'function'){
                options.sendMessage($(this).data("row-id"));
            }
        });
        if($('[data-toggle="tooltip"]').length > 0){
            $('[data-toggle="tooltip"]').tooltip()
        }
        var isSelected = grid.data('.rs.jquery.bootgrid').selectedRows.length == 0 ? 'disabled' : '';
        if(grid.find(".send-item").length > 0 || options.sendAll){
            var btnClass = '';
            if(options.sendAllText == 'Send All'){
                isSelected = '';
                btnClass = '';
            } else {
                btnClass = 'row-selected';
                $(".show-selected").remove();
                var gridData = grid.data('.rs.jquery.bootgrid');
                var onlySelected = 'Show selected';
                if(gridData.onlySelected){
                    onlySelected = 'Show All';
                }
                var $button = $('<button class="btn btn-info '+btnClass+' show-selected margin-right-20" '+isSelected+'>'+onlySelected+'</button>');
                $(".infos").before($button);
                $(".show-selected").on("click", function(e){
                    if(gridData && typeof gridData.showSelected == 'function'){
                        gridData.showSelected();
                    }
                });
            }
            $(".send-all-items").remove();
            var $button = $('<button class="btn btn-info '+btnClass+' send-all-items margin-right-20" '+isSelected+'>'+options.sendAllText+'</button>');
            $(".infos").before($button);
            $(".send-all-items").on("click", function(e){
                if(options && typeof options.sendAll == 'function'){
                    options.sendAll();
                }
            });
            if(options.addTagsToUsers){
                $(".add-tags-to-users").remove();
                var $button = $('<button class="btn btn-info '+btnClass+' add-tags-to-users margin-right-20" '+isSelected+'>Add Tags to Selected</button>');
                $(".infos").before($button);
                $(".add-tags-to-users").on("click", function(e){
                    if(options && typeof options.addTagsBtnClicked == 'function'){
                        options.addTagsBtnClicked();
                    }
                });
            }
        }
        isSelected = grid.data('.rs.jquery.bootgrid').selectedRows.length == 0 ? 'disabled' : '';
        if(options.deleteSelected){
            $(".delete-accepted-connection-requests").remove();
            var $button = $('<button class="btn btn-info row-selected delete-accepted-connection-requests margin-right-20" '+isSelected+'>Delete selected</button>');
            $(".infos").before($button);
            $(".delete-accepted-connection-requests").on("click", function(e){
                if(options && typeof options.deleteSelectedClicked == 'function'){
                    options.deleteSelectedClicked(grid.data('.rs.jquery.bootgrid').selectedRows);
                }
            });
        }
    });
    grid.on('selected.rs.jquery.bootgrid deselected.rs.jquery.bootgrid', function(e){
        if(typeof options.selectionChange == 'function'){
            options.selectionChange();
        }
    });
}

function getProfileDetails(callback){
    chrome.storage.local.get('user_details',function(ud){
        user_details = ud['user_details'];
        if(typeof callback == 'function'){
            callback();
        }
    })
}

function getConnectionsSent(callback){
    chrome.runtime.sendMessage({'getUserSentConnections':true}, function(sc){
        callback(sc['conns']);
    })
}

function addTagsToConnections(vals, conns, idx, callback){
    var conn_id = conns[idx];
    if(conn_id){
        addTagsToConnection(vals, conn_id, function(){
            idx++;
            addTagsToConnections(vals, conns, idx, callback);
        })
    } else if(typeof callback == 'function'){
        callback();
    }
}

function removeConnectionInvitations(conn_ids, idx, callback, is_pending){
    if(conn_ids[idx]){
        var conn_id = conn_ids[idx];
        withdrawConnection(conn_id, function(){
            $.ajax({
                method: 'POST',
                url: site_url + 'remove_connection',
                data: {
                    connection_id: conn_id
                },
                success: function() {
                    idx++;
                    removeConnectionInvitations(conn_ids, idx, callback, is_pending);
                }
            })
        })
    } else if(typeof callback == 'function'){
        callback();
    }

}

function addTagsToConnection(vals, conn_id, callback){
    $.ajax({
        url : site_url+'add_tag_to_connection',
        type : 'POST',
        data : {
            connection_id : conn_id,
            user_id : user_details.id,
            tags : vals.toString()
        },
        success : function(resp){
            if(resp.id || resp.success == "1"){
                if(typeof callback == 'function'){
                    callback();
                } else {
                    $("#edit--tag").modal("hide");
                    location.reload();
                }
            } else {
                swal({
                    title : 'Error',
                    text : resp.message
                });
            }
        }
    })
}

function withdrawConnection(conn_id, callback){
    // DEBUG : Will add withdraw functionlity here
    callback();
    // if(conn_id){
    //     console.log(conn_id);
    // } else if(typeof callback == 'function'){
    //     callback();
    // }
}

function showNotification(txt) {
    chrome.runtime.sendMessage({
        showNotification: txt
    });
}

function notify(opts){
    $.notify({
            title: opts.title,
            message: opts.message,
        },{
            element: 'body',
            type: opts.type || 'success',
            allow_dismiss: true,
            offset: {
                x: 30,
                y: 30
            },
            spacing: 10,
            z_index: 1031,
            delay: 3000,
            timer: 1000,
            url_target: '_blank',
            mouse_over: false,
            template:   '<div data-notify="container" id="message_notification" class="alert alert-dismissible alert-{0}" role="alert">' +
                        '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span></button>' +
                        '<span data-notify="title">{1}</span><br />' +
                        '<span data-notify="message" id="message_count">{2}</span>' +
                        '</div>'
    });
    if(opts.sendMessages){
        setTimeout(function(){
            $("#message_notification").remove();
            chrome.runtime.sendMessage({
                removeBadge: true
            })
            showNotification("Messages are sent successfully!");
        },3000);
    }
    // var messageInterval = setInterval(function(){
    //     chrome.browserAction.getBadgeText({},function(txt){
    //         if(txt){
    //             $("#message_count").text('Number of messages sent : '+txt+'/'+opts.recordsLength);
    //         } else {
    //             clearInterval(messageInterval);
    //             messageInterval = null;
    //             setTimeout(function(){
    //                 $("#message_notification").remove();
    //                 chrome.runtime.sendMessage({
    //                     removeBadge: true
    //                 })
    //                 showNotification("Messages are sent successfully!");
    //             },3000);
    //         }
    //     })
    // },100);
}

function disableRefreshIcon(){
    $(".table-bootgrid__actions .zmdi-refresh-sync").attr("disabled","disabled");
}

function enableRefreshIcon(){
    $(".table-bootgrid__actions .zmdi-refresh-sync").removeAttr("disabled");
}
